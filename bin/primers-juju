#!/usr/bin/env python3

import sys
from os import path as osp
import argparse
import traceback
from dataclasses import dataclass

from pycbio.sys.configInPy import evalConfigFile

sys.path.insert(0, osp.normpath(osp.join(osp.normpath(osp.join(osp.dirname(__file__), "../lib")))))

from primersjuju import PrimersJuJuDataError
from primersjuju.config import GenomeConfig
from primersjuju.primer_targets import primer_targets_build
from primersjuju.design_primers import design_primers
from primersjuju.output import output_target_designs, output_target_design_file
from primersjuju.primer_target_spec import primer_target_specs_read


@dataclass
class ErrorInfo:
    """Options for how to handle errors and other cases, along with a counter of
    errors that were skipped"""
    debug: bool
    force: bool = False
    stop_on_error: bool = False
    error_cnt: int = 0

def parse_args():
    desc = """Primers-JuJu tool to assist in designing RTC-PCR primers
    with Primer3.

    https://github.com/diekhans/PrimerS-JuJu/

    Designing primers:
    If output exists for a target, it is skipped unless --force is specified.
    """

    def _add_primer_targets(parser):
        parser.add_argument("-g", "--genome", dest="genome",
                            help="genome name, often name in UCSC browser; required if configuration files contains multiple genome")
        parser.add_argument("primer_targets_tsv",
                            help="primers target TSV")

    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("-c", "--conf", dest="config_py", default="etc/config.py",
                        help="configuration file as a python module")
    parser.add_argument("-d", "--debug", action="store_true",
                        help="enable debugging info, include stack traces")
    subparsers = parser.add_subparsers(dest='subcommand', required=True,
                                       help="sub-command help")
    # check
    sp_check = subparsers.add_parser("check",
                                     help="check validity of input files")
    _add_primer_targets(sp_check)

    # design
    sp_design = subparsers.add_parser("design",
                                      help="run primer design, target_ids with existing output will be skipped unless --force is specified")
    _add_primer_targets(sp_design)
    sp_design.add_argument("-t", "--target", action="append", dest="target_ids",
                           help="only design the specified target ids; maybe repeated")
    sp_design.add_argument("--huburl", action="append", dest="hub_urls",
                           help="hub URL to include when linking to UCSC browser; maybe repeated")
    sp_design.add_argument("--force", action="store_true", default=False,
                           help="force creation of design")
    parser.add_argument("--primer3-debug", dest="primer3_debug", action="store_true",
                        help="print primer3 output and debugging for each run")
    sp_design.add_argument("--stop-on-error", dest="stop_on_error", action="store_true", default=False,
                           help="stop if there is a target specification error rather than continue")
    sp_design.add_argument("outdir",
                           help="output directory, which is created if it doesn't exist")

    args = parser.parse_args()
    if args.subcommand == "check":
        args.error_info = ErrorInfo(args.debug)
    elif args.subcommand == "design":
        args.error_info = ErrorInfo(args.debug, args.force, args.stop_on_error)

    return args

def print_prog_errors(ex, error_info):
    """Prints error messages without call stack unless debug is specified. For expected exceptions """
    print("Error: " + str(ex), file=sys.stderr)
    if error_info.debug:
        traceback.print_tb(ex.__traceback__, file=sys.stderr)
    exc = ex.__cause__
    while exc is not None:
        print("caused by: " + str(exc), file=sys.stderr)
        if error_info.debug:
            traceback.print_tb(exc.__traceback__, file=sys.stderr)
        exc = exc.__cause__

def _do_load_config(config_py, genome) -> GenomeConfig:
    """gets GenomeConfig object from config for genome, which maybe None if only one genome"""
    config_vars = evalConfigFile(config_py)
    config = config_vars.config
    if config is None:
        raise PrimersJuJuDataError("variable 'config' is not set")
    if len(config.genomes) == 0:
        raise PrimersJuJuDataError("no genomes specified in config PrimersJuJuConfig object")
    if genome is None:
        if len(config.genomes) > 1:
            raise PrimersJuJuDataError("genome not specified and multiple genomes specified in configuration")
        genome = list(config.genomes.keys())[0]
    return config.genomes[genome]

def _load_config(config_py, genome) -> GenomeConfig:
    """local config and return genome configuration for genome.  If no
    genome is not specified and there is only on genome in configuration, it
    is returned as the default"""
    try:
        return _do_load_config(config_py, genome)
    except Exception as ex:
        raise PrimersJuJuDataError(f"error process configuration file '{config_py}'") from ex

def check_subcommand(args):
    "config and validated input files just by loading"
    _load_config(args.config_py, args.genome)
    primer_target_specs_read(args.primer_targets_tsv)


def _do_design_target(config, primer_target_spec, error_info, hub_urls, primer3_debug, outdir):
    "design and output one target"
    primer_targets = primer_targets_build(config.genome_data, primer_target_spec)
    primer_designs = design_primers(config.genome_data, primer_targets, uniqueness_query=config.uniqueness_query, primer3_debug=primer3_debug)
    output_target_designs(outdir, primer_targets, primer_designs, hub_urls)

def _design_target(config, primer_target_spec, error_info, hub_urls, primer3_debug, outdir):
    try:
        return _do_design_target(config, primer_target_spec, error_info, hub_urls, primer3_debug, outdir)
    except PrimersJuJuDataError as ex:
        if error_info.stop_on_error:
            raise
        else:
            print(f"*** Error: skipping {primer_target_spec.target_id} due to errors in design specification:", file=sys.stderr)
            print_prog_errors(ex, error_info)
            error_info.error_cnt += 1

def _design_target_maybe(config, primer_target_spec, error_info, hub_urls, primer3_debug, outdir):
    # target_design_file is created atomically
    if error_info.force or (not osp.exists(output_target_design_file(outdir, primer_target_spec.target_id))):
        print(f">>> Designing {primer_target_spec.target_id}", file=sys.stderr)
        _design_target(config, primer_target_spec, error_info, hub_urls, primer3_debug, outdir)
    else:
        print(f">>> Skipping {primer_target_spec.target_id}, design exists", file=sys.stderr)

def _design_targets(config, primer_target_specs, target_ids, error_info, hub_urls, primer3_debug, outdir):
    for target_id in target_ids:
        _design_target_maybe(config, primer_target_specs.targets[target_id], error_info,
                             hub_urls, primer3_debug, osp.join(outdir, target_id))
    print(">>> Designs complete", file=sys.stderr)

def _get_target_ids(primer_target_specs, target_id_subset):
    "generate list of target ids, possible filtered by a specified subset"
    all_target_ids = set(primer_target_specs.targets.keys())
    if (target_id_subset is None) or (len(target_id_subset) == 0):
        return sorted(all_target_ids)
    target_id_subset = set(target_id_subset)
    bad = target_id_subset - all_target_ids
    if len(bad) > 0:
        raise PrimersJuJuDataError("target id(s) not in spec file: '{}'".format("', '".join(bad)))
    return sorted(target_id_subset)

def design_subcommand(args):
    "run primer design on input"
    config = _load_config(args.config_py, args.genome)
    primer_target_specs = primer_target_specs_read(args.primer_targets_tsv)
    _design_targets(config, primer_target_specs,
                    _get_target_ids(primer_target_specs, args.target_ids),
                    args.error_info, args.hub_urls, args.primer3_debug, args.outdir)

def primersJuJu(args):
    try:
        if args.subcommand == "check":
            check_subcommand(args)
        elif args.subcommand == "design":
            design_subcommand(args)
    except Exception as ex:
        print_prog_errors(ex, args.error_info)
        exit(1)
    if args.error_info.error_cnt > 0:
        print(f"*** {args.error_info.error_cnt} task(s) failed", file=sys.stderr)
        exit(1)

primersJuJu(parse_args())
