#!/usr/bin/env python3

import sys
from os import path as osp
import argparse
import traceback

sys.path.insert(0, osp.normpath(osp.join(osp.dirname(__file__), "../lib")))
from primersjuju.primer_target_spec import primer_targets_specs_read

def parse_args():
    desc = """Primers-JuJu tool to assist in designing RTC-PCR primers
    with Primer3.

    https://github.com/diekhans/PrimerS-JuJu/
    """

    def _add_primer_targets(parser):
        parser.add_argument("primer_targets_tsv",
                            help="primers target TSV")

    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("-d", "--debug", action="store_true",
                        help="enable debugging info, include stack traces")
    subparsers = parser.add_subparsers(dest='subcommand', required=True,
                                       help="sub-commands help")
    # check
    sp_check = subparsers.add_parser("check",
                                     help="check validity of input files")
    _add_primer_targets(sp_check)
    args = parser.parse_args()
    return args

def handle_prog_errors(ex, debug):
    """Prints error messages without call stack and exit. For expected exceptions """
    print("Error: " + str(ex), file=sys.stderr)
    if debug:
        traceback.print_tb(ex.__traceback__, file=sys.stderr)
    exc = ex.__cause__
    while exc is not None:
        print("caused by: " + str(exc), file=sys.stderr)
        if debug:
            traceback.print_tb(exc.__traceback__, file=sys.stderr)
        exc = exc.__cause__
    exit(1)


def check_subcommand(args):
    primer_targets_specs_read(args.primer_targets_tsv)


def primersJuJu(args):
    try:
        if args.subcommand == "check":
            check_subcommand(args)
    except Exception as ex:
        handle_prog_errors(ex, args.debug)


primersJuJu(parse_args())
