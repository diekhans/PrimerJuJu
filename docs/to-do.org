* is genome_data srcUrl really needed?

* add mispriming_check(putative_seq, sequences, tm_threshold)


* not sure if PRIMER_MIN_3_PRIME_OVERLAP_OF_JUNCTION works

* look at this for addition pp analysis:
https://libnano.github.io/primer3-py/api/thermoanalysis.html

* : dict() is a hack around primer3 give type error on ObjDict


* repeat filtering
This is suggestion from ThermoFisher regaridng Primer design: Try to avoid
runs of 4 or more of one base, or dinucleotide repeats (for example, ACCCC or
ATATATAT).

for now set PRIMER_MAX_POLY_X, PRIMER_INTERNAL_MAX_POLY_X (int; default 5)
Equivalent parameter of PRIMER_MAX_POLY_X for the internal oligo.

* type check Primer3Config variables
check for ones that can't be specified without breaking JuJU
also, don't have to specify None fields in the Primer3Config.__init__

* primer3 upgrade issues 2024-03-19
** debug option got from design_primers
** primer3 doesn't like ObjDict, even though it is a dict.  Hack for now  "/hive/users/markd/gencode/projs/primer-design/PrimerS-JuJu/dev-venv/lib/python3.12/site-packages/primer3/bindings.py", line 582, in designPrimers
    return THERMO_ANALYSIS.run_design(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: Argument 'global_args' has incorrect type (expected dict, got ObjDict)

* full program logic, less cmdline parsing, should be in library

* small end exon issue
** JuJu could detect this and warn
** try to pick primer that put more sequence in end exons
** verify amplicon correctly aligns with BLAT or minimap2
* deal better with pairing of transcripts with primers, etc.
started etc/targetBed.as, but decided to just add pairing in amplicons for now
* main tsv doesn't need improved for multiple isoforms
* include gene name as standard column for statistics
* only include URL part in TSV, separate program to make spread sheet.
* targeted transcript BED could have amplicon annotated
not targeted region, however this would require on sequence per primer pair
added amplicon bed, but might want others.
* strip ids of white space in input
* stable ids or history tracking
* design_primers.py PrimerDesign
maybe this shouldn't have assumptions about a single transcript??
PrimerDesigns does have the transcript, but the primer3 info
is in 
    
* Document multiple transcript with same amplicon, add new sets.
* PRIMER_LEFT_END_STABILITY is different than we though:
** IDT's does it per potential dimer
** primer3: f is the delta G of disruption of the five 3' bases of the primer.
* tools for dimer prediction
** http://biotools.nubic.northwestern.edu/OligoCalc.html
http://biotools.nubic.northwestern.edu/OligoCalcSource3.19.zip
* save away BEDs from test cases for future tests without relying on entire bigBed
* ability to control splice junction overlap, then try with less stringency
PRIMER_MIN_3_PRIME_OVERLAP_OF_JUNCTION
PRIMER_MIN_5_PRIME_OVERLAP_OF_JUNCTION
for now, default to 8
* ugly location formating
caused by: specified primer region, after adjusted for exon bounds chr17:49970352-49970466 for transcript (non_redundant_NNC/ENST00000705765) must contain either one exon, or two exons and an intron: [IntronFeature(genome=Coords(name='chr17', start=49970352, end=49970466, strand='+', size=83257441), trans=Coords(name='ENST00000705765', start=1164, end=1164, strand='+', size=2759))]

* Region is too small, need a better error message
>>> Designing C19orf81+1
Error: PRIMER_MAX_SIZE > min PRIMER_PRODUCT_SIZE_RANGE
WTC11_consolidated	chr19:50658491-50658506	chr19:50658963-50659037	NNC_64139	C19orf81	C19orf81+1		
# region too small
'PRIMER_MIN_SIZE': 18,
    'PRIMER_MAX_SIZE': 22,
    'PRIMER_EXPLAIN_FLAG': 1,
    'PRIMER_PRODUCT_SIZE_RANGE': [[19, 110]]}


* additional transcripts:
** output amplicons for additional transcripts
** output a list of additional transcript that will be amplified.
I would add length of those transcripts. That would provide size estimations that you expect to have in your gel
amplicon length I would say
** clearly explain what additonal transcripts does.

** very unhelpful:
Error: target IL1B+7 failed
caused by: specified primer region, after adjusted for exon bounds contig_14815_pilon:23250-23316 does not overlap transcript (manatee_consolidated, NIC-118574)

** instead of stopping, can flag with error in spreed sheet and have tracks to
help debug

* invalid feature bounds message is hard to read
caused by: specified primer region, after adjusted for exon bounds contig_18545_pilon:304550-304734 for transcript
(manatee_consolidated, NNC-298417) must contain either one exon, or two exons and an intron:
 [IntronFeature(genome=Coords(name='contig_18545_pilon', start=304550, end=304734, strand='+', size=353458),
                              trans=Coords(name='NNC-298417', start=2697, end=2697, strand='+', size=3955))]

* bad primers BEDs
** CCDC106+1 - outside of target
** DPP3+1 - doesn't cross intro.
* CERNA1+1 - some of isPCr showed going into retained intron
* Ordered primers by  score
* rna annotates doesn't work right
* renamed ppair_id
* delete empty columns in spec
* primer_design -> design_pairs
* rename to indicated if they are features_5p, features_3p are genome or transcriptome order
* created primers that went beyond 3' end of region.  This maybe something primer3 does
see test_design_primers_guts.py test_FBXL16(request, genome_data, wtc11_targets_specs_set1):
* include seq_args and global_args in Primer3Results and dump from there,
primer3_dump_args should not have to recalculate
* bounds() name not so clear
* '+' is a bit of a confusing name separator, maybe CCDC106_1_pp1

* if slop on ends of specified range extends too far into intron
get confusing error message:

caused by: specified primer region contig_18545_pilon:308302-309177 for transcript (manatee_consolidated, NNC-298416) must contain either one exon, or two exons and an intron: [IntronFeature(genome=Coords(name='contig_18545_pilon', start=308302, end=308460, strand='+', size=353458), trans=Coords(name='NNC-298416', start=6264, end=6264, strand='+', size=7336))
 ExonFeature(genome=Coords(name='contig_18545_pilon', start=308460, end=309177, strand='+', size=353458), trans=Coords(name='NNC-298416', start=6264, end=6981, strand='+', size=7336))]
* allow for larger slop
** trimming into exons was not implemented, despite comment:
def _build_target_transcript(genome_data, primer_target_spec, trans_spec):
    "build transcript with initial regions trimmed to exons"

* improve config file errors (see pycbio issues)
* need test cases not relying on external hubs;
make make a test data repo
* better setup instructions and running instructions
** config not documented
** step by step on running it

    
* add Thermodynamic analysis from primer3_py (via Monkia)

** mv_conc (Union[float, int]) – Monovalent cation concentration (mM)
The standard concentration of monovalent cations, typically potassium (K⁺) or
sodium (Na⁺), in a PCR reaction is generally set to 50 mM, often provided as
50 mM K+ or 50 mM Na+. This concentration is consistent with specifications
provided by tools like the IDT OligoAnalyzer and the LA Taq Polymerase
specification sheet, where a 50 mM concentration of monovalent cations is
standard for optimal enzyme function and primer annealing.

** dv_conc (Union[float, int]) – Divalent cation concentration (mM)
The standard concentration of divalent cations, typically magnesium ions (Mg²⁺), in a PCR reaction generally ranges from 1.5–2.5 mM (often provided as MgCl₂). According to the IDT OligoAnalyzer tool, this concentration is 3 mM, whereas the LA Taq Polymerase specification sheet recommends 2 mM. To evaluate the bioinformatics tool, we can set dv_conc to 2.5 mM as a balanced concentration for divalent cations.
Balancing the concentrations of both monovalent and divalent cations is important for efficient PCR, as too much or too little can affect enzyme activity and specificity. (edited) 

** dntp_conc (Union[float, int])* – dNTP concentration (mM)
This concentration provides an adequate supply of nucleotides for DNA
synthesis without causing excessive background or non-specific amplification.
The standard concentration of dNTPs (deoxynucleotide triphosphates) in a PCR
reaction is typically set to 200 µM of each dNTP (dATP, dCTP, dGTP, and
dTTP). This concentration is also recommended in the LA Taq Polymerase
specification sheet, making it a reliable choice. (edited)

** dmso_conc (float) – Concentration of DMSO (%)
The standard concentration of DMSO (dimethyl sulfoxide) in a PCR reaction
typically ranges from 1–10% (v/v). For most applications, a concentration of
5% DMSO is commonly used as a starting point. DMSO helps stabilize DNA
2When evaluating Gibbs free energy change (ΔG) for primer dimers in PCR, the simulation temperature typically used is:

37°C
This temperature reflects physiological conditions and is commonly applied when assessing the stability of DNA interactions, including primer-dimer formation.
However, depending on the context of your study or the specific conditions of your PCR, you may also consider temperatures around:

25°C (room temperature) for some theoretical calculations

60°C or higher for evaluating dimer stability under denaturing conditions typical of the PCR process.
For most practical applications involving PCR, 37°C is the standard temperature used for calculating ΔG values related to primer dimers.

I propose that we test temperatures of
37°C and 50-60°C, as these temperatures are close to the annealing temperature typically used during standard PCR reactions.

** annealing_temp_c (float) – Actual annealing temperature of the PCR reaction (°C)
The actual annealing temperature in a PCR reaction is a critical parameter that influences the specificity and efficiency of primer binding to the DNA template. It is typically set based on the melting temperature (Tm) of the primers used, generally ranging from 50°C to 68°C. Optimizing the annealing temperature can help minimize non-specific amplification and improve the overall yield of the desired PCR product.

As previously mentioned, it is challenging to establish a strict annealing temperature, as it can vary for each primer.

